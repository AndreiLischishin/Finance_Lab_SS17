\hypertarget{random__functions_8hpp}{}\section{/home/hendrik/\+Dokumente/\+Studium/\+Finance\+\_\+\+Lab\+\_\+\+S\+S17/\+Final/header\+\_\+files/random\+\_\+functions.hpp File Reference}
\label{random__functions_8hpp}\index{/home/hendrik/\+Dokumente/\+Studium/\+Finance\+\_\+\+Lab\+\_\+\+S\+S17/\+Final/header\+\_\+files/random\+\_\+functions.\+hpp@{/home/hendrik/\+Dokumente/\+Studium/\+Finance\+\_\+\+Lab\+\_\+\+S\+S17/\+Final/header\+\_\+files/random\+\_\+functions.\+hpp}}
{\ttfamily \#include $<$iostream$>$}\\*
{\ttfamily \#include $<$fstream$>$}\\*
{\ttfamily \#include $<$stdlib.\+h$>$}\\*
{\ttfamily \#include $<$stdio.\+h$>$}\\*
{\ttfamily \#include $<$string$>$}\\*
{\ttfamily \#include $<$time.\+h$>$}\\*
{\ttfamily \#include $<$math.\+h$>$}\\*
{\ttfamily \#include $<$vector$>$}\\*
{\ttfamily \#include $<$gsl/gsl\+\_\+rng.\+h$>$}\\*
{\ttfamily \#include $<$gsl/gsl\+\_\+cdf.\+h$>$}\\*
{\ttfamily \#include $<$gsl/gsl\+\_\+randist.\+h$>$}\\*
Include dependency graph for random\+\_\+functions.\+hpp\+:
% FIG 0
This graph shows which files directly or indirectly include this file\+:
% FIG 1
\subsection*{Macros}
\begin{DoxyCompactItemize}
\item 
\#define {\bfseries A0}~0.\+398942270991\hypertarget{random__functions_8hpp_a0d158f1e3af2ab523eb8423db3e5bd6e}{}\label{random__functions_8hpp_a0d158f1e3af2ab523eb8423db3e5bd6e}

\item 
\#define {\bfseries A1}~0.\+020133760596\hypertarget{random__functions_8hpp_acd92b430059d886880c53f13ae038e3f}{}\label{random__functions_8hpp_acd92b430059d886880c53f13ae038e3f}

\item 
\#define {\bfseries A2}~0.\+002946756074\hypertarget{random__functions_8hpp_a2946bc30423c2a996eeafa49e995c30e}{}\label{random__functions_8hpp_a2946bc30423c2a996eeafa49e995c30e}

\item 
\#define {\bfseries B1}~0.\+217134277847\hypertarget{random__functions_8hpp_a7b21d6a6a4573b4997b1f04b01cd4efb}{}\label{random__functions_8hpp_a7b21d6a6a4573b4997b1f04b01cd4efb}

\item 
\#define {\bfseries B2}~0.\+018576112465\hypertarget{random__functions_8hpp_a6945d50f798e1fde624d70c74457090e}{}\label{random__functions_8hpp_a6945d50f798e1fde624d70c74457090e}

\item 
\#define {\bfseries B3}~0.\+000643163695\hypertarget{random__functions_8hpp_ae6ac0edb1e2c9c7672ab9488d8b65be9}{}\label{random__functions_8hpp_ae6ac0edb1e2c9c7672ab9488d8b65be9}

\item 
\#define {\bfseries C0}~1.\+398247031184\hypertarget{random__functions_8hpp_ac539c7fe47611738d5320760d4453602}{}\label{random__functions_8hpp_ac539c7fe47611738d5320760d4453602}

\item 
\#define {\bfseries C1}~-\/0.\+360040248231\hypertarget{random__functions_8hpp_a44779f18d87e71c78fc9fbf9dc88537d}{}\label{random__functions_8hpp_a44779f18d87e71c78fc9fbf9dc88537d}

\item 
\#define {\bfseries C2}~0.\+022719786588\hypertarget{random__functions_8hpp_ad6fc13322a4f1c314332ff34aa8b3fa0}{}\label{random__functions_8hpp_ad6fc13322a4f1c314332ff34aa8b3fa0}

\item 
\#define {\bfseries D0}~1.\+460954518699\hypertarget{random__functions_8hpp_ae0b2360d4b8e961bf2709b0663fd9f2a}{}\label{random__functions_8hpp_ae0b2360d4b8e961bf2709b0663fd9f2a}

\item 
\#define {\bfseries D1}~-\/0.\+305459640162\hypertarget{random__functions_8hpp_a52deba56234661c77d4b9573d5175ae2}{}\label{random__functions_8hpp_a52deba56234661c77d4b9573d5175ae2}

\item 
\#define {\bfseries D2}~0.\+038611796258\hypertarget{random__functions_8hpp_a7537ecd0f0af6ccc5b85d5df80f4aee7}{}\label{random__functions_8hpp_a7537ecd0f0af6ccc5b85d5df80f4aee7}

\item 
\#define {\bfseries D3}~-\/0.\+003787400686\hypertarget{random__functions_8hpp_afea037e4c6e9187610b538bd6a34b8ff}{}\label{random__functions_8hpp_afea037e4c6e9187610b538bd6a34b8ff}

\item 
\#define {\bfseries E0}~2.\+50662823884\hypertarget{random__functions_8hpp_a73f0647950b85591fbe61fff44d45c2e}{}\label{random__functions_8hpp_a73f0647950b85591fbe61fff44d45c2e}

\item 
\#define {\bfseries E1}~-\/18.\+61500062529\hypertarget{random__functions_8hpp_a9c73f041ffe2562e07a3a9f6e62de5e2}{}\label{random__functions_8hpp_a9c73f041ffe2562e07a3a9f6e62de5e2}

\item 
\#define {\bfseries E2}~41.\+39119773534\hypertarget{random__functions_8hpp_afe784fb045791fe0c97c8e848627cbe0}{}\label{random__functions_8hpp_afe784fb045791fe0c97c8e848627cbe0}

\item 
\#define {\bfseries E3}~-\/25.\+44106049637\hypertarget{random__functions_8hpp_a31cbade3f8edb728b06a18b804010544}{}\label{random__functions_8hpp_a31cbade3f8edb728b06a18b804010544}

\item 
\#define {\bfseries F0}~-\/8.\+47351093090\hypertarget{random__functions_8hpp_a2ab300cbf3906ff6fcc7b07681dac361}{}\label{random__functions_8hpp_a2ab300cbf3906ff6fcc7b07681dac361}

\item 
\#define {\bfseries F1}~23.\+08336743743\hypertarget{random__functions_8hpp_a54af470c198f3dbe32eede2c32f3d746}{}\label{random__functions_8hpp_a54af470c198f3dbe32eede2c32f3d746}

\item 
\#define {\bfseries F2}~-\/21.\+06224101826\hypertarget{random__functions_8hpp_a5368759862ac5fb38772b91eace1205c}{}\label{random__functions_8hpp_a5368759862ac5fb38772b91eace1205c}

\item 
\#define {\bfseries F3}~3.\+13082909833\hypertarget{random__functions_8hpp_a79fc770a19406e6876ff9ffd6ce66f3d}{}\label{random__functions_8hpp_a79fc770a19406e6876ff9ffd6ce66f3d}

\item 
\#define {\bfseries G0}~0.\+3374754822726147\hypertarget{random__functions_8hpp_a6440afc9207bc5eba00d9161ff744e16}{}\label{random__functions_8hpp_a6440afc9207bc5eba00d9161ff744e16}

\item 
\#define {\bfseries G1}~0.\+9761690190917186\hypertarget{random__functions_8hpp_aa8fd4816db72561194059582cf0efb09}{}\label{random__functions_8hpp_aa8fd4816db72561194059582cf0efb09}

\item 
\#define {\bfseries G2}~0.\+1607979714918209\hypertarget{random__functions_8hpp_ae62138575e5117b9426bd8bb1830e036}{}\label{random__functions_8hpp_ae62138575e5117b9426bd8bb1830e036}

\item 
\#define {\bfseries G3}~0.\+0276438810333863\hypertarget{random__functions_8hpp_aa18956b1e077aaf1b24bcb4b7eb841f5}{}\label{random__functions_8hpp_aa18956b1e077aaf1b24bcb4b7eb841f5}

\item 
\#define {\bfseries G4}~0.\+0038405729373609\hypertarget{random__functions_8hpp_a6f984a8b01aafc34122cc8bc0d9d5691}{}\label{random__functions_8hpp_a6f984a8b01aafc34122cc8bc0d9d5691}

\item 
\#define {\bfseries G5}~0.\+0003951896511919\hypertarget{random__functions_8hpp_a206f8f478aee56b55771546844d68a5f}{}\label{random__functions_8hpp_a206f8f478aee56b55771546844d68a5f}

\item 
\#define {\bfseries G6}~0.\+0000321767881768\hypertarget{random__functions_8hpp_acacab09484f962bcb59e7d1dcc68e8c0}{}\label{random__functions_8hpp_acacab09484f962bcb59e7d1dcc68e8c0}

\item 
\#define {\bfseries G7}~0.\+0000002888167364\hypertarget{random__functions_8hpp_ac8e9950f46638247d6a0986bb488ad54}{}\label{random__functions_8hpp_ac8e9950f46638247d6a0986bb488ad54}

\item 
\#define {\bfseries G8}~0.\+0000003960315187\hypertarget{random__functions_8hpp_a476ab3e6b1d7f433a1bea30b793060f0}{}\label{random__functions_8hpp_a476ab3e6b1d7f433a1bea30b793060f0}

\end{DoxyCompactItemize}
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
double \hyperlink{random__functions_8hpp_a19526e6fadf775a56735c2ba7dde80b9}{random\+\_\+number\+\_\+01} ()
\item 
double \hyperlink{random__functions_8hpp_a955b51c233f8992897ca5d6497d68c31}{random\+\_\+number\+\_\+01\+\_\+\+G\+SL} (gsl\+\_\+rng $\ast$r)
\item 
double \hyperlink{random__functions_8hpp_a89d0330238c925b3b5812b5e4583fe18}{rejection\+\_\+sampl\+\_\+algo} (gsl\+\_\+rng $\ast$r)
\item 
double \hyperlink{random__functions_8hpp_a5d04b4ea8492d9c10b6ba838b1c558a7}{normal\+\_\+cdf} (double x)
\item 
double \hyperlink{random__functions_8hpp_acf5555d3927b736febdd784e2cbae160}{normal\+\_\+inverse\+\_\+cdf} (double x)
\item 
std\+::vector$<$ double $>$ $\ast$ \hyperlink{random__functions_8hpp_a59006c8833ff05e4df50680d6b2d917a}{box\+\_\+muller\+\_\+algo} (gsl\+\_\+rng $\ast$r)
\item 
double \hyperlink{random__functions_8hpp_a290047380a1e258032960cf232cf7748}{sigma\+\_\+naive} (std\+::vector$<$ double $>$ $\ast$sample, int N)
\item 
double \hyperlink{random__functions_8hpp_abfd8c70069b425f7288f6ac20839c8d0}{sigma\+\_\+algorithm} (std\+::vector$<$ double $>$ $\ast$sample, int N)
\item 
std\+::vector$<$ double $>$ $\ast$ \hyperlink{random__functions_8hpp_a485ed93a0c324453196f4ca8ad9bfaa4}{wiener\+\_\+process} (gsl\+\_\+rng $\ast$r, double T, double delta\+\_\+t)
\item 
std\+::vector$<$ double $>$ $\ast$ \hyperlink{random__functions_8hpp_a4770d6cd7afcf77d63557fbeb7405558}{brownian\+\_\+motion} (gsl\+\_\+rng $\ast$r, double T, double delta\+\_\+t, std\+::vector$<$ double $>$ $\ast$w, double s0, double mu, double sigma)
\end{DoxyCompactItemize}


\subsection{Function Documentation}
\index{random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}!box\+\_\+muller\+\_\+algo@{box\+\_\+muller\+\_\+algo}}
\index{box\+\_\+muller\+\_\+algo@{box\+\_\+muller\+\_\+algo}!random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}}
\subsubsection[{\texorpdfstring{box\+\_\+muller\+\_\+algo(gsl\+\_\+rng $\ast$r)}{box_muller_algo(gsl_rng *r)}}]{\setlength{\rightskip}{0pt plus 5cm}std\+::vector$<$double$>$$\ast$ box\+\_\+muller\+\_\+algo (
\begin{DoxyParamCaption}
\item[{gsl\+\_\+rng $\ast$}]{r}
\end{DoxyParamCaption}
)}\hypertarget{random__functions_8hpp_a59006c8833ff05e4df50680d6b2d917a}{}\label{random__functions_8hpp_a59006c8833ff05e4df50680d6b2d917a}
Box Muller Algorithm.


\begin{DoxyParams}{Parameters}
{\em mu} & It is mean for the normal distribution \\
\hline
{\em sigma} & It is sigma for the normal distribution\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
It returns pointer to the vector with 2 normal distributed values 
\end{DoxyReturn}
\index{random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}!brownian\+\_\+motion@{brownian\+\_\+motion}}
\index{brownian\+\_\+motion@{brownian\+\_\+motion}!random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}}
\subsubsection[{\texorpdfstring{brownian\+\_\+motion(gsl\+\_\+rng $\ast$r, double T, double delta\+\_\+t, std\+::vector$<$ double $>$ $\ast$w, double s0, double mu, double sigma)}{brownian_motion(gsl_rng *r, double T, double delta_t, std::vector< double > *w, double s0, double mu, double sigma)}}]{\setlength{\rightskip}{0pt plus 5cm}std\+::vector$<$double$>$$\ast$ brownian\+\_\+motion (
\begin{DoxyParamCaption}
\item[{gsl\+\_\+rng $\ast$}]{r, }
\item[{double}]{T, }
\item[{double}]{delta\+\_\+t, }
\item[{std\+::vector$<$ double $>$ $\ast$}]{w, }
\item[{double}]{s0, }
\item[{double}]{mu, }
\item[{double}]{sigma}
\end{DoxyParamCaption}
)}\hypertarget{random__functions_8hpp_a4770d6cd7afcf77d63557fbeb7405558}{}\label{random__functions_8hpp_a4770d6cd7afcf77d63557fbeb7405558}
Simulates brownian motion path for the given values of wiener process.


\begin{DoxyParams}{Parameters}
{\em r} & Pointer to the gsl\+\_\+rng object for generating standard normal distributed numbers \\
\hline
{\em T} & Time period of simulated process \\
\hline
{\em delta\+\_\+t} & Step of discretisation \\
\hline
{\em w} & Pointer to the vector with values of wiener process at discretisation points \\
\hline
{\em s0} & Value of brownian\+\_\+motion at time = 0 \\
\hline
{\em mu} & Drift \\
\hline
{\em sigma} & Volatility\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Pointer to the vector of values at discretisation points 
\end{DoxyReturn}
\index{random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}!normal\+\_\+cdf@{normal\+\_\+cdf}}
\index{normal\+\_\+cdf@{normal\+\_\+cdf}!random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}}
\subsubsection[{\texorpdfstring{normal\+\_\+cdf(double x)}{normal_cdf(double x)}}]{\setlength{\rightskip}{0pt plus 5cm}double normal\+\_\+cdf (
\begin{DoxyParamCaption}
\item[{double}]{x}
\end{DoxyParamCaption}
)}\hypertarget{random__functions_8hpp_a5d04b4ea8492d9c10b6ba838b1c558a7}{}\label{random__functions_8hpp_a5d04b4ea8492d9c10b6ba838b1c558a7}
Moro\textquotesingle{}s algorithm is an approximation to the c.\+d.\+f. of the standard normal distribution with an accurancy of 8 digits.


\begin{DoxyParams}{Parameters}
{\em x} & Double value, point at which $p(x)$ will be calculated\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
If everything worked fine returns $p(x)$ 
\end{DoxyReturn}
\index{random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}!normal\+\_\+inverse\+\_\+cdf@{normal\+\_\+inverse\+\_\+cdf}}
\index{normal\+\_\+inverse\+\_\+cdf@{normal\+\_\+inverse\+\_\+cdf}!random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}}
\subsubsection[{\texorpdfstring{normal\+\_\+inverse\+\_\+cdf(double x)}{normal_inverse_cdf(double x)}}]{\setlength{\rightskip}{0pt plus 5cm}double normal\+\_\+inverse\+\_\+cdf (
\begin{DoxyParamCaption}
\item[{double}]{x}
\end{DoxyParamCaption}
)}\hypertarget{random__functions_8hpp_acf5555d3927b736febdd784e2cbae160}{}\label{random__functions_8hpp_acf5555d3927b736febdd784e2cbae160}
Calculates the inverse C\+DF of the standard normal distribution for a parameter x.


\begin{DoxyParams}{Parameters}
{\em x} & The parameter for the inverse C\+DF of the standard normal distribution\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The value of the inverse C\+DF at x 
\end{DoxyReturn}
\index{random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}!random\+\_\+number\+\_\+01@{random\+\_\+number\+\_\+01}}
\index{random\+\_\+number\+\_\+01@{random\+\_\+number\+\_\+01}!random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}}
\subsubsection[{\texorpdfstring{random\+\_\+number\+\_\+01()}{random_number_01()}}]{\setlength{\rightskip}{0pt plus 5cm}double random\+\_\+number\+\_\+01 (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)}\hypertarget{random__functions_8hpp_a19526e6fadf775a56735c2ba7dde80b9}{}\label{random__functions_8hpp_a19526e6fadf775a56735c2ba7dde80b9}
Draws a random number bewtween $[0,1]$ via rand.

\begin{DoxyReturn}{Returns}
The drawn random number 
\end{DoxyReturn}
\index{random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}!random\+\_\+number\+\_\+01\+\_\+\+G\+SL@{random\+\_\+number\+\_\+01\+\_\+\+G\+SL}}
\index{random\+\_\+number\+\_\+01\+\_\+\+G\+SL@{random\+\_\+number\+\_\+01\+\_\+\+G\+SL}!random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}}
\subsubsection[{\texorpdfstring{random\+\_\+number\+\_\+01\+\_\+\+G\+S\+L(gsl\+\_\+rng $\ast$r)}{random_number_01_GSL(gsl_rng *r)}}]{\setlength{\rightskip}{0pt plus 5cm}double random\+\_\+number\+\_\+01\+\_\+\+G\+SL (
\begin{DoxyParamCaption}
\item[{gsl\+\_\+rng $\ast$}]{r}
\end{DoxyParamCaption}
)}\hypertarget{random__functions_8hpp_a955b51c233f8992897ca5d6497d68c31}{}\label{random__functions_8hpp_a955b51c233f8992897ca5d6497d68c31}
Draws a random number in $[0,1]$ via the gsl.


\begin{DoxyParams}{Parameters}
{\em r} & A pointer to the random number generator which is used\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The drawn random number 
\end{DoxyReturn}
\index{random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}!rejection\+\_\+sampl\+\_\+algo@{rejection\+\_\+sampl\+\_\+algo}}
\index{rejection\+\_\+sampl\+\_\+algo@{rejection\+\_\+sampl\+\_\+algo}!random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}}
\subsubsection[{\texorpdfstring{rejection\+\_\+sampl\+\_\+algo(gsl\+\_\+rng $\ast$r)}{rejection_sampl_algo(gsl_rng *r)}}]{\setlength{\rightskip}{0pt plus 5cm}double rejection\+\_\+sampl\+\_\+algo (
\begin{DoxyParamCaption}
\item[{gsl\+\_\+rng $\ast$}]{r}
\end{DoxyParamCaption}
)}\hypertarget{random__functions_8hpp_a89d0330238c925b3b5812b5e4583fe18}{}\label{random__functions_8hpp_a89d0330238c925b3b5812b5e4583fe18}
Rejection Sampling Algorithm

The algorithm produces a standard normal distributed value.


\begin{DoxyParams}{Parameters}
{\em r} & A pointer to gsl\+\_\+rng object \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
x Returns double value, which is standard normal distributed 
\end{DoxyReturn}
interval bounds $[a,b]$, s.\+t. $\int ^{b}_{a}p\left(x\right) dx = 1$, p(x) density for a standard normal distribution\index{random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}!sigma\+\_\+algorithm@{sigma\+\_\+algorithm}}
\index{sigma\+\_\+algorithm@{sigma\+\_\+algorithm}!random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}}
\subsubsection[{\texorpdfstring{sigma\+\_\+algorithm(std\+::vector$<$ double $>$ $\ast$sample, int N)}{sigma_algorithm(std::vector< double > *sample, int N)}}]{\setlength{\rightskip}{0pt plus 5cm}double sigma\+\_\+algorithm (
\begin{DoxyParamCaption}
\item[{std\+::vector$<$ double $>$ $\ast$}]{sample, }
\item[{int}]{N}
\end{DoxyParamCaption}
)}\hypertarget{random__functions_8hpp_abfd8c70069b425f7288f6ac20839c8d0}{}\label{random__functions_8hpp_abfd8c70069b425f7288f6ac20839c8d0}
Calculates the variance for N given values.


\begin{DoxyParams}{Parameters}
{\em sample} & Samples to calculate the variance of \\
\hline
{\em N} & Number of samples\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The calculated variance of the samples 
\end{DoxyReturn}
\index{random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}!sigma\+\_\+naive@{sigma\+\_\+naive}}
\index{sigma\+\_\+naive@{sigma\+\_\+naive}!random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}}
\subsubsection[{\texorpdfstring{sigma\+\_\+naive(std\+::vector$<$ double $>$ $\ast$sample, int N)}{sigma_naive(std::vector< double > *sample, int N)}}]{\setlength{\rightskip}{0pt plus 5cm}double sigma\+\_\+naive (
\begin{DoxyParamCaption}
\item[{std\+::vector$<$ double $>$ $\ast$}]{sample, }
\item[{int}]{N}
\end{DoxyParamCaption}
)}\hypertarget{random__functions_8hpp_a290047380a1e258032960cf232cf7748}{}\label{random__functions_8hpp_a290047380a1e258032960cf232cf7748}
Naively computing sigma of given samples.


\begin{DoxyParams}{Parameters}
{\em N} & Number of given samples \\
\hline
{\em sample} & Pointer to the vector of double valued normal distributed samples\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The calculated variance of the samples 
\end{DoxyReturn}
\index{random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}!wiener\+\_\+process@{wiener\+\_\+process}}
\index{wiener\+\_\+process@{wiener\+\_\+process}!random\+\_\+functions.\+hpp@{random\+\_\+functions.\+hpp}}
\subsubsection[{\texorpdfstring{wiener\+\_\+process(gsl\+\_\+rng $\ast$r, double T, double delta\+\_\+t)}{wiener_process(gsl_rng *r, double T, double delta_t)}}]{\setlength{\rightskip}{0pt plus 5cm}std\+::vector$<$double$>$$\ast$ wiener\+\_\+process (
\begin{DoxyParamCaption}
\item[{gsl\+\_\+rng $\ast$}]{r, }
\item[{double}]{T, }
\item[{double}]{delta\+\_\+t}
\end{DoxyParamCaption}
)}\hypertarget{random__functions_8hpp_a485ed93a0c324453196f4ca8ad9bfaa4}{}\label{random__functions_8hpp_a485ed93a0c324453196f4ca8ad9bfaa4}
Simulates a wiener process.


\begin{DoxyParams}{Parameters}
{\em r} & Pointer to the gsl\+\_\+rng object for generating standard normal distributed numbers \\
\hline
{\em T} & Time period of simulated process \\
\hline
{\em delta\+\_\+t} & Step of discretisation\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Pointer to the vector of values at discretisation points 
\end{DoxyReturn}
